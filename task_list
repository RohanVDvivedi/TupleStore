OPTIMIZATION TASKS FOR COMPUTATION
1*add tomb_stone_count on fixed array page to quickly calculate space_occupied_by_tuples
 *add space_occupied_by_tuples on slotted page to quickly calculate space_occupied_by_tuples\
 *add tomb_stone_count on slotted page
 *implement get_space_occupied_by_all_tomb_stones function for both the page types
 *fragmented_space = space_allotted_to_tuples - space_occupied_by_tuples - space_occupied_by_tomb_stones - free_space

FEATURE TASKS REDUCE SPACE USED ON PAGE
2* do not store is_null bit for variable length tuples, instead make only their offsets as 0, this will save 1 bit worth of memory
 * provide an option to use is_NON_NULL_field, to save ourselves from allocating a bit in the bitmap for the fields that can not be NULL.
 * store is_NULL_bitmap_size_in_bits in tuple def
 * provide a bit_offset_to_is_null_bit_in_is_null_bitmap value attribute to element_def, since now each element's bit can be at a different location in the is_null_bitmap
 * non_null fields when written to by NULL should fail

OPTIMIZATION FOR COMPRESSION TASKS
3* make provisions to reset the unused bytes to 0s on the page while performing init_page, run_page_compaction, deleting a tuple, or updating a tuple. The reseting of bits should happen always on init_page, run_page_compaction. and should happen if a macro is defined OR use a global variable for this.
