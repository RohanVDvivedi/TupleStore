1* think how to do it (using a macro or a separate param to every function or just do it during compaction)
 * make provisions to reset the unused bytes to 0s on the page while performing init_page, run_page_compaction, deleting a tuple, updating a tuple and swaping the tuple. The reseting of bits should happen always on init_page, run_page_compaction. and should happen if a macro is defined on a swap, update or delete.
  * this will avail better compression on the page

2* implement it in a separate branch, since we need to test compatibility
 * provide an option to use is_NON_NULL_field, to save ourselves from allocating a bit in the bitmap for the fields that can not be NULL.
 * provide a bit_offset_to_is_null_bit_in_is_null_bitmap value attribute to element_def, since now each element's bit can be at a different location in the is_null_bitmap
 * non_null fields when written to by NULL are just set to 0

3* update read_value_from_page and write_value_to_page fuinctions to perform a memcpy when the access is unaligned
  * unaligned access won't work on arm computers
 * also allow 3 byte unsigned integers to be stored on the pages, this will help us save space
 * build a header to read and write integers of length varying from 1 to 8 bytes, and return them only as specific type of ints 1-uint8_t 2-uint16_t 3,4-uint32_t 5,6,7 and 8 as uint64_t, also built functions to read and write 1-8 bytes with number of bytes as parameters
 * make the above task as a little/big endian format, give a macro to control that
 * replace and use them for reading and writing data in the elements, from the elements

4* refactor element from a union of pointers to just a void* just like the representation of a tuple
 * provide int, unsigned int types all the way from 1 to 8 bytes wide (all in between sizes included)
 * refactor comparisions for unsigned int and int to upcast to uint64 and int64 before comparind
 * segregate string/blob compare/assign/hash functions to a different different classes
 * real compare assign functions to their classes
 * int/uint compare assign functions to their separate classes
